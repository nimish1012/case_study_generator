# -*- coding: utf-8 -*-
"""case_study_generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ZB8QLJl1bLQBVosjhRBn3ZDfqw8qmgd
"""

!pip install openai langchain llama_index

!pip install python-dotenv PyPDF2 streamlit pypdf chromadb

from google.colab import drive
drive.mount('/content/drive')

import os
from langchain.document_loaders import PyPDFLoader
from langchain.text_splitter import CharacterTextSplitter
from langchain.vectorstores import Chroma
from langchain.embeddings import OpenAIEmbeddings
from langchain.agents import Tool

OPENAI_API_KEY = "YOUR-OPENAI-KEY"
os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY

# load the document as before
# loader = PyPDFLoader('/content/drive/MyDrive/data_001/USER INPUT. NOTES.pdf')
loader = PyPDFLoader('/content/drive/MyDrive/data_001/input3.pdf')

documents = loader.load()

allPageContent=''
for page in documents:
  print(page.page_content)
  allPageContent+=page.page_content

allPageContent=''
for page in documents:
  print(page.page_content)
  allPageContent+=page.page_content

Authorname=allPageContent.rsplit('Author ')[1].rsplit('\nDisease Name')[0].replace(':','')
DiseaseName=allPageContent.rsplit('\nDisease Name')[1].rsplit('\nTake away')[0].replace(':','')
takeaway_note=allPageContent.rsplit('lesson ')[1].rsplit('Admission notes')[0].replace('-','')
Admission_note=allPageContent.rsplit('Admission notes')[1].rsplit('HPI')[0].replace(':','')
consultation_note=allPageContent.rsplit('HPI')[1].rsplit('Discharge notes')[0]
Discharge_note=allPageContent.rsplit('Discharge notes')[1]

# Authorname=allPageContent.rsplit('Author name')[1].rsplit('\nDisease Name')[0].replace(':','')
# DiseaseName=allPageContent.rsplit('\nDisease Name')[1].rsplit('\nTake away')[0].replace(':','')
# takeaway_note=allPageContent.rsplit('rning point')[1].rsplit('Admission Notes')[0].replace('-','')
# Admission_note=allPageContent.rsplit('Admission Notes')[1].rsplit('consultation notes')[0]
# consultation_note=allPageContent.rsplit('consultation notes')[1].rsplit('Discharge notes')[0]
# Discharge_note=allPageContent.rsplit('Discharge notes')[1]

print(takeaway_note)

print(Admission_note)

print(consultation_note)

print(Discharge_note)

template = '''
You have following 3 goals:

1. Read {takeaway_note} thoroughly and extract 5 keywords from it, that identifies the diagnosis or any medical disease.
2. Provide an detailed summary of the consultation_note's contents in atleast 1000 words: {consultation_note}. Must add all the important information.
3. Provide an detailed summary of the Admission_note's contents in atleast 1000 words: {Discharge_note}. Must add all the important information.


Output must in the following form:

Keywords:
1,
2.
3.
4.
5.

consultation_note_summary:

Discharge_note_summary:

 '''

# from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate
from langchain.agents import Agent
import openai


prompt = PromptTemplate(input_variables=['takeaway_note', 'consultation_note', 'Discharge_note'],
    template=template)

from langchain.chat_models import ChatOpenAI
from langchain.llms import OpenAI

# # llm = ChatOpenAI(temperature=0.7, model="gpt-4")#............................token size is less( 8,192 tokens )
# llm = OpenAI(temperature=0.8, model="gpt-3.5-turbo-16k")#..................token size( 16,384 tokens )
llm = ChatOpenAI(temperature=0.6, model="gpt-3.5-turbo-16k")#..................token size( 16,384 tokens )
# # llm = ChatOpenAI(temperature=0.7, model="gpt-4-32k")#........................not available

# Create the chain.
from langchain.chains import LLMChain
chain = LLMChain(llm=llm, prompt=prompt, verbose=True)
# agent = Agent(llm=llm, prompt=prompt, verbose=True)

# Generate the output
out = chain.run({
    'takeaway_note': takeaway_note,
    'consultation_note': consultation_note,
    'Discharge_note': Discharge_note
})


# # Generate the output.
# out = chain.run(the_inputs)

# Print the output.
print(out)

# Split the 'out' variable into sections based on section headers
sections = out.split('\n\n')

# Extract the sections
keyword_section = sections[0].strip()
consultation_note_summary_section = sections[1].strip()
discharge_note_summary_section = sections[2].strip()

print(keyword_section)

# Keywords  Astma, Inflammatory pseudotumour  , Tracheal obstruction , dyspnoea and cough .

print(consultation_note_summary_section)

print(discharge_note_summary_section)

import re
keywords=keyword_section.rsplit('\n')
keywords = [re.sub(r'^\d+\.\s*', '', item) for item in keywords if re.match(r'^\d+\.\s*', item) is not None]
print(keywords)

# keywords = ["thiamine deficiency", "vitamin B1 deficiency"," vitamin B6 deficiency", "thalamic hyperintensities", "neurological damage due to malnutrition"]

import requests
import xml.etree.ElementTree as ET
from time import sleep

APIKey = '4f3d3582c763070d118ac94ac806da05a008'

def search_pmc_by_keyword(keyword):
    pmc_ids = []
    base_url = 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils/'
    db = 'pubmed'  # PubMed Central database
    url = f'{base_url}esearch.fcgi?db={db}&term={keyword}&retmax=3'

    try:
        # Make the request to the PMC API to search for articles
        response = requests.get(url)
        response.raise_for_status()

        # Parse the XML response
        xml_data = response.text

        # Extract the PubMed Central IDs (PMC IDs) from the XML response
        for line in xml_data.splitlines():
            if "<Id>" in line:
                pmc_id = line.strip("<Id>").strip("</Id>")
                pmc_ids.append(pmc_id)

    except requests.exceptions.RequestException as e:
        print(f'Error: {str(e)}')

    references_s = []  # Store references in this variable
    abstract_s = []    # Store abstracts in this variable

    if pmc_ids:
        print(f"Found {len(pmc_ids)} relevant PMC articles with the keyword '{keyword}':")
        for pmc_id in pmc_ids:
            AIPURl = f'https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=pubmed&id={pmc_id}&api_key={APIKey}'
            try:
                response = requests.get(AIPURl)
                response.raise_for_status()
                xml_data = response.text
                Authers = ''
                pubtypes = ''
                Title = ''
                pubdate = ''
                pubmed = ""
                doi = ''
                for line in xml_data.splitlines():
                    # print(line,"kkkkkkkkkkkk")
                    if '<Item Name="Title" Type="String">' in line:
                        Title=line.strip('<Item Name="Title" Type="String">').strip("</Item>")
                        Title=Title.rsplit('<Item Name="Title" Type="String">')[1]
                    if '<Item Name="EPubDate" Type="Date">' in line:
                        # print(line)
                        pubdate=line.strip('<Item Name="EPubDate" Type="Date">').strip("</Item>")
                        pubdate=line.rsplit('<Item Name="EPubDate" Type="Date">')[1]
                    if '<Item Name="Author" Type="String">' in line:
                        auther = line.strip('<Item Name="Author" Type="String">').strip("</Item>")
                        auther=auther.rsplit('<Item Name="Author" Type="String">')[1]
                        Authers+=auther+", "
                    if '<Item Name="PubType" Type="String">' in line:
                        pubtype = line.strip('<Item Name="PubType" Type="String">').strip("</Item>")
                        pubtype=pubtype.rsplit('<Item Name="PubType" Type="String">')[1]
                        pubtypes+=pubtype+", "
                    if '<Item Name="pubmed" Type="String">' in line:
                        pubmed ="pubmed:"+ line.strip('<Item Name="pubmed" Type="String">').strip("</Item>")
                        pubmed=pubmed.rsplit('<Item Name="pubmed" Type="String">')[1]
                    if '<Item Name="DOI" Type="String">' in line:
                        doi=line.strip('<Item Name="DOI" Type="String">').strip('</Item>')
                        doi=doi.rsplit('<Item Name="DOI" Type="String">')[1]

                abstract = get_abstract_for_pmc_id(pmc_id)  # Fetch the abstract
                Ref = f'{Title} \n {Authers} \n {pubtypes} {pubmed} {pubdate} {doi}.'
                print(Ref)
                references_s.append(Ref)  # Append reference to references_s
                abstract_s.append(abstract)  # Append abstract to abstract_s
                sleep(3)

            except requests.exceptions.RequestException as e:
                print(f'Error: {str(e)}')
                return references_s, abstract_s
        return references_s, abstract_s
    else:
        print(f"No relevant articles found for the keyword '{keyword}'")

def get_abstract_for_pmc_id(pmc_id):
    abstract_url = f'https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&id={pmc_id}&retmode=xml'
    try:
        response = requests.get(abstract_url)
        response.raise_for_status()
        xml_data = response.text
        root = ET.fromstring(xml_data)
        abstract_elements = root.findall('.//AbstractText')
        # print(len(abstract_elements))
        # print(abstract_elements[0].text,"fffffffff")


        try:
            abstract = '\n'.join(element.text.strip() for element in abstract_elements)
            return abstract
        except:
           pass


    except requests.exceptions.RequestException as e:
        print(f'Error fetching abstract for PMC ID {pmc_id}: {str(e)}')
        return 'Abstract Not Found'

all_references = []
all_abstracts = []
reference_counter = 1
abstract_counter = 1

for keyw in keywords:
    references, abstracts = search_pmc_by_keyword(keyw)
    for ref in references:
        numbered_ref = f'{reference_counter}. {ref}'
        all_references.append(numbered_ref)
        reference_counter += 1
    for abstract in abstracts:
        numbered_abstract = f'{abstract_counter}. {abstract}'
        all_abstracts.append(numbered_abstract)
        abstract_counter += 1

print(all_references)

all_references = '\n'.join(all_references)
print(all_references)

all_abstracts = '\n'.join(all_abstracts)
print(all_abstracts)

# Authorname
# DiseaseName
# takeaway_note
# Admission_note
# consultation_note
# Discharge_note
# consultation_note_summary_section
# discharge_note_summary_section
# all_references
# all_abstracts
# keywords

""" # PART 01 """

template = '''

WORD LIMIT: 200 words

You act as a physician/medical health provider, Make sure to provide medical terminologies related to {keywords}.
You have the following main goals:
- Most importantly, to ensure patient privacy, You must not include any personal information such as Patient's name, Date of birth, any other dates, Hospital name and addresses
- Generate a Title for the case-study, followed by the words “- case report”. Use {keywords} and {Take_away_Input} to generate a title.
- Generate an Abstract for the case-study, Use {Discharge_note} and {Take_away_Input} to generate the abstract.


the output must be in the following format:

---------

TITLE –

KEYWORDS –
Keywords must be same as user provide and must be included here. Get the keywords from {keywords}

ABSTRACT –
(Explain:
- What is unique about this case and what does it add to the scientific literature
- What are the important clinical finding (Use {Discharge_note}), diagnoses, symptoms, interventions, and outcomes.
- What are one or two “take-away” lessons from this case report)

------------

 '''

# from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate
from langchain.agents import Agent
import openai

prompt = PromptTemplate(input_variables=['Take_away_Input', 'Discharge_note', 'keywords'],
    template=template)

from langchain.chat_models import ChatOpenAI
from langchain.llms import OpenAI
llm = ChatOpenAI(temperature=0.7, model="gpt-3.5-turbo-16k")

# Create the chain.
from langchain.chains import LLMChain
chain = LLMChain(llm=llm, prompt=prompt, verbose=True)

# Generate the output
out_1 = chain.run({
    'Take_away_Input': takeaway_note,
    'Discharge_note': Discharge_note,
    'keywords': keywords
})


# Print the output.
print(out_1)

# discharge_note_summary_section

"""# PART 02"""

# a new template
template = '''

WORD LIMIT: 200 words

You act as a physician/medical health provider, Make sure to provide medical terminologies related to {keywords}.
You have following two main goals:
-To ensure patient privacy, You must not include any personal information such as Patient's name, Date of birth, any other dates, Hospital name and addresses.
-Generate an Introduction section for the case-study, Focus on {Discharge_note}, {Take_away_Input} and {keywords} to generate the response.

the output MUST be in the following format:
-------

INTRODUCTION –
- Offer a brief description of what sets this case apart, emphasizing its importance and the particular problem it addresses.
- Describe the rarity of the disease's usual presentation and emphasize how this case differs due to its unusual presentation.
- Use {all_abstracts}, and relate them with the case.

---------

THE RESPONSE MUST NOT CONTAIN ANY PERSONAL INFORMATION(including  Patient's name, Date of birth, any other dates, Hospital name and addresses.)

 '''

# from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate
from langchain.agents import Agent
import openai


prompt = PromptTemplate(input_variables=['Take_away_Input', 'all_abstracts', 'Discharge_note', 'keywords'],
    template=template)

from langchain.chat_models import ChatOpenAI
from langchain.llms import OpenAI
llm = ChatOpenAI(temperature=0.7, model="gpt-3.5-turbo-16k")#..................token size( 16,384 tokens )

# Create the chain.
from langchain.chains import LLMChain
chain = LLMChain(llm=llm, prompt=prompt, verbose=True)

# Generate the output
out = chain.run({
    'Take_away_Input': takeaway_note,
    'keywords': keywords,
    'all_abstracts': all_abstracts,
    'Discharge_note': Discharge_note})


# Print the output.
print(out)

out_2 = re.sub(r'Paragraph \d+:', '', out)
print(out_2)

"""# PART 03"""

# a new template
template = '''

WORD LIMIT: 200 words

You act as a physician/medical health professional, Make sure to focus on medical terminologies related to {keywords}.
You have following main goals:
-To generate a Case presentation for the case-study.
-To ensure patient privacy, You must remove all personal information such as Names, Date of birth, any dates, Hospital name and addresses.


the output must be in the following format:

CASE PRESENTATION –
Contains FIVE  paragraphs that provides a comprehensive overview of a patient's medical journey, including their history, dates, examination, investigations, assessment/plan, and outcomes respectively.

Paragraph 1:
- In this paragraph delve into the primary concerns and symptoms exhibited by the patient, along with any relevant past interventions and their respective outcomes. No headings are included in this section to maintain a seamless narrative.
Paragraph 2:
- In this paragraph encompass the patient's history and clinical findings. Highlight the significant physical examinations (PE) and crucial clinical observations. Furthermore, delve into the patient's medical, family, and psychosocial history, including any pertinent genetic information, if available. The information is sourced from {Admission_note}, and no headings are used.
Paragraph 3:
- Provide a detailed insight into the diagnostic assessment. Include an overview of the diagnostic methods employed, such as evaluations, tests, exams (e.g., MRI, CT, XRAY), and the reasons behind their requisition. Laboratory testing, imaging, and survey results should also be discussed, along with a comprehensive problem list, including alternative diagnoses considered. This information is drawn from {Admission_note} and {consultation_note}.
Paragraph 4:
- This paragraph should be dedicated to treatment and therapeutic intervention. It outlines the types of therapeutic interventions employed, which may include pharmacologic, surgical, or preventive measures. Details regarding the administration of these interventions, including dosage, strength, and duration, should be provided. Any changes made to the therapeutic interventions should be explained. This section references the {Discharge_note}, which indicates the patient's discharge medications and outlines the assessment plan.
Paragraph 5:
- In this paragraph explore follow-up and outcomes. Clinician- and patient-assessed outcomes, if available, should be discussed. You should also consider whether the patient required a return to the hospital and analyze any significant follow-up diagnostic results. The effectiveness of the treatment is assessed, and any adverse or unanticipated events are documented. Information is sourced from the {Discharge_note} and {consultation_note}.


 '''

# from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate
from langchain.agents import Agent
import openai


prompt = PromptTemplate(input_variables=['Admission_note', 'Discharge_note', 'consultation_note', 'keywords'],
    template=template)

from langchain.chat_models import ChatOpenAI
from langchain.llms import OpenAI
llm = ChatOpenAI(temperature=0.7, model="gpt-3.5-turbo-16k")#..................token size( 16,384 tokens )

# Create the chain.
from langchain.chains import LLMChain
chain = LLMChain(llm=llm, prompt=prompt, verbose=True)

# Generate the output
out = chain.run({
              'Admission_note':Admission_note,
              'Discharge_note':discharge_note_summary_section,
              'consultation_note':consultation_note_summary_section,
              'keywords': keywords
              })


# Print the output.
print(out)

out_3 = re.sub(r'Paragraph \d+:', '', out)
print(out_3)

"""# PART 04"""

# a new template
template = '''

Make detailed responses

You act as a physician/medical health professional, Make sure to focus on medical terminologies related to {keywords}.
You have following main goals:
-To ensure patient privacy, You must remove all personal information such as Names, Date of birth, any dates, Hospital name and addresses.
-Generate an Discussion section for the case-study (WORD LIMIT: 300 words).
-Generate a Conclusion section for the case-study (WORD LIMIT: 200 words).
-All references must be added from {all_references}(WORD LIMIT: 200 words).


the output must be in the following format:

DISCUSSION –
Contain FOUR paragraphs as explained below,
Paragraph 1:
- The first paragraph may explain the objective of reporting the case. Strengths and limitations in your approach to this case. why the case is noteworthy and the problem that it addresses. Use {Take_away_Input}
Paragraph 2:
- The Second paragraph must describe what others have written before about the condition. Go through {all_abstracts}, Also add corresponding reference number from {all_references}. Quote the literature but don’t go into unnecessary details. Discussion of the relevant medical literature. This part describes the existing theories and research findings on the key issue in the patient's condition.
Paragraph 3:
- Add symptoms of all diseases in the {keywords}.
Paragraph 4:
- The third paragraph substantiates the message you are trying to convey. Proof of the rarity of the condition or symptom presentation or treatment (Assessment/Plan in {Discharge_note}) or adverse reaction and the scientific explanations for it. You must describe the cause of the condition/treatment, Plan/particular procedure/unusual symptoms of the diagnose ({Discharge_note}-Assessment Plan). How does it differ from usual (literature) cause of disease or describe an unusual cause of disease, an unusual or unknown disorder, a challenging differential diagnosis, unusual symptom, unusual or puzzling clinical features symptoms, improved or unique technical procedures, unusual interactions, rare or novel adverse reactions to care, or new insight into the pathogenesis of disease. The primary “take-away” {Take_away_Input} lessons from this case report. (NLP-ClinicalBert)

CONCLUSION –
Explain what is novel about this case and how it will impact the medical field and other patients with the same condition. Summarize key lessons learned from a case in terms of the background of the condition/disease and clinical practice guidance for clinicians when presented with similar cases. {Take_away_Input}

REFERENCES –
All {all_references} must be added here.

 '''

# from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate
from langchain.agents import Agent
import openai

prompt = PromptTemplate(input_variables=[ 'Discharge_note', 'Take_away_Input', 'all_abstracts', 'all_references', 'keywords'],
    template=template)

from langchain.chat_models import ChatOpenAI
from langchain.llms import OpenAI

llm = ChatOpenAI(temperature=0.7, model="gpt-3.5-turbo-16k")#..................token size( 16,384 tokens )
# Create the chain.
from langchain.chains import LLMChain
chain = LLMChain(llm=llm, prompt=prompt, verbose=True)

# Generate the output
out = chain.run({
              'Discharge_note':discharge_note_summary_section,
              'Take_away_Input':takeaway_note,
              'all_abstracts': all_abstracts,
              'all_references': all_references,
              'keywords': keywords
              })

# Print the output.
print(out)

out_4 = re.sub(r'Paragraph \d+:', '', out)
print(out_4)

"""# PART 05"""

oni = f"{out_1}\n\n{out_2}\n\n{out_3}\n\n{out_4}"
print(oni)
